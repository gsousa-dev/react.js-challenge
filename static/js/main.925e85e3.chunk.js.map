{"version":3,"sources":["components/SearchBar.js","components/UserContactInfo.js","components/UserCard.js","api/Api.js","components/CardsContainer.js","components/App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","filterOptions","state","isInvalidOption","handleSearchValueChange","bind","assertThisInitialized","handleFilterOptionChange","ev","onSearchValueChange","target","value","setState","onFilterOptionChange","react_default","a","createElement","className","onChange","map","option","index","key","type","placeholder","searchValue","disabled","Component","UserContactInfo","contactInfo","href","concat","phone","title","index_es","icon","email","website","rel","UserCard","_props$user","user","address","company","name","username","city","components_UserContactInfo","Api","fetch","method","response","status","Promise","reject","resolve","json","_context","t0","CardsContainer","users","fetchingUsers","errorFetchingUsers","filterUsers","fetchUsers","_this2","then","catch","error","finally","criteria","toLowerCase","field","selectedFilterOption","includes","listItems","filter","tabIndex","id","components_UserCard","noResults","length","renderList","library","add","faGlobeAmericas","faPhone","faEnvelope","faHome","App","selectedOption","components_SearchBar","components_CardsContainer","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.925e85e3.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport '../scss/SearchBar.scss';\r\n\r\nclass SearchBar extends Component {\r\n\r\n  filterOptions = ['Email', 'Name', 'Username'];\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = { isInvalidOption: true };\r\n\r\n    this.handleSearchValueChange = this.handleSearchValueChange.bind(this);\r\n    this.handleFilterOptionChange = this.handleFilterOptionChange.bind(this);\r\n  }\r\n\r\n  handleSearchValueChange(ev) {\r\n    this.props.onSearchValueChange(ev.target.value);\r\n  }\r\n\r\n  handleFilterOptionChange(ev) {\r\n    this.setState({ isInvalidOption: !ev.target.value });\r\n    this.props.onFilterOptionChange(ev.target.value);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"SearchBar\">\r\n        <select className={`item filterBy`} onChange={this.handleFilterOptionChange}>\r\n          <option value=\"\">Filter by:</option>\r\n          {this.filterOptions.map((option, index) => (\r\n          <option key={index} value={option}>\r\n            {option}\r\n          </option>\r\n          ))}\r\n        </select>\r\n\r\n        <input\r\n          className={`item searchInput`}\r\n          type=\"search\"\r\n          placeholder=\"Search..\"\r\n          value={this.props.searchValue}\r\n          onChange={this.handleSearchValueChange}\r\n          disabled={this.state.isInvalidOption}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;\r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport '../scss/UserContactInfo.scss';\r\n\r\n\r\nfunction UserContactInfo(props) {\r\n  const contactInfo = props.contactInfo;\r\n\r\n  return (\r\n    <section className=\"UserContactInfo\">\r\n      <ul className=\"iconList\">\r\n        <li className=\"iconListItem\">\r\n          <a href={`tel:${contactInfo.phone}`} title={contactInfo.phone}>\r\n            <FontAwesomeIcon icon=\"phone\" />\r\n          </a>\r\n        </li>\r\n        <li className=\"iconListItem\">\r\n          <a href={`mailto:${contactInfo.email}`} title={contactInfo.email}>\r\n            <FontAwesomeIcon icon=\"envelope\" />\r\n          </a>\r\n        </li>\r\n        <li className=\"iconListItem\">\r\n          <a href={`//${contactInfo.website}`} target=\"_blank\" rel=\"noopener noreferrer\" title={contactInfo.website}>\r\n            <FontAwesomeIcon icon=\"globe-americas\" />\r\n          </a>\r\n        </li>\r\n      </ul>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default UserContactInfo;","import React               from 'react';\r\nimport UserContactInfo     from './UserContactInfo';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport '../scss/UserCard.scss';\r\n\r\n\r\nfunction UserCard (props) {\r\n  const {\r\n    address,\r\n    company,\r\n    email,\r\n    name,\r\n    username,\r\n    phone,\r\n    website\r\n  } = props.user;\r\n\r\n  return (\r\n    <section className=\"UserCard\">\r\n      <div className=\"generalInfo\">\r\n        <h2>{name}</h2>\r\n        <p className=\"username\">{username}</p>\r\n        <p>Works @ {company.name}</p>\r\n        <p><FontAwesomeIcon icon=\"home\" /> {address.city} </p>\r\n      </div>\r\n\r\n      <UserContactInfo contactInfo={{address, email, phone, website}} />\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default UserCard;\r\n","const baseUrl = 'https://jsonplaceholder.typicode.com';\r\n\r\nexport default class Api {\r\n  static async fetchUsers() {\r\n    try {\r\n      const response = await fetch(`${baseUrl}/users`, { method: 'GET' });\r\n      \r\n      if (response.status >= 400) {\r\n        return Promise.reject(`There was an error when fetching the users.`);\r\n      }\r\n\r\n      return Promise.resolve(response.json());\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport UserCard             from './UserCard';\r\nimport Api                  from '../api/Api';\r\nimport '../scss/CardsContainer.scss';\r\n\r\nclass CardsContainer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    this.state = { users: [], fetchingUsers: false, errorFetchingUsers: null };\r\n\r\n    this.filterUsers = this.filterUsers.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchUsers();\r\n  }\r\n\r\n  fetchUsers() {\r\n    this.setState({ fetchingUsers: true });\r\n\r\n    return Api.fetchUsers()\r\n      .then(users => this.setState({ users }))\r\n      .catch(error => this.setState({ errorFetchingUsers: error }))\r\n      .finally(() => this.setState({ fetchingUsers: false }));\r\n  }\r\n\r\n  filterUsers(user) {\r\n    const criteria = this.props.searchValue.toLowerCase();\r\n    const field = this.props.selectedFilterOption.toLowerCase();\r\n\r\n    if (!field) return true;\r\n \r\n    return user[field].toLowerCase().includes(criteria);\r\n  }\r\n\r\n  renderList() {\r\n    const listItems = this.state.users\r\n      .filter(this.filterUsers)  \r\n      .map(user => {\r\n        return (\r\n          <li className=\"cardListItem\" tabIndex=\"0\" key={user.id}>\r\n            <UserCard user={user} />\r\n          </li>\r\n        )\r\n      });\r\n\r\n    const noResults = (!this.state.errorFetchingUsers) ? 'No results.' : this.state.errorFetchingUsers;\r\n\r\n    return (\r\n      (listItems.length) ? <ul className=\"cardList\">{listItems}</ul> : noResults\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <section className=\"CardsContainer\">\r\n        { (this.state.fetchingUsers) ? 'Loading users...' : this.renderList() }\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CardsContainer;\r\n","import React, { Component } from 'react';\nimport SearchBar            from './SearchBar';\nimport CardsContainer       from './CardsContainer';\nimport { library }          from '@fortawesome/fontawesome-svg-core'\nimport { \n  faGlobeAmericas,\n  faHome, faPhone,\n  faEnvelope }              from '@fortawesome/free-solid-svg-icons';\nimport '../scss/App.scss';\n\nlibrary.add(faGlobeAmericas, faPhone, faEnvelope, faHome);\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { searchValue: '', selectedFilterOption: '' };\n    \n    this.handleSearchValueChange = this.handleSearchValueChange.bind(this);\n    this.handleFilterOptionChange = this.handleFilterOptionChange.bind(this);\n  }\n\n  handleSearchValueChange(searchValue) {\n    this.setState({ searchValue });\n  }\n\n  handleFilterOptionChange(selectedOption) {\n    this.setState({ selectedFilterOption: selectedOption });\n  }\n\n  render() {\n    return (\n      <main className=\"App\">\n        <div className=\"container\">\n          <SearchBar\n            searchValue={this.state.searchValue}\n            onSearchValueChange={this.handleSearchValueChange}\n            onFilterOptionChange={this.handleFilterOptionChange}\n          />\n          <CardsContainer\n            searchValue={this.state.searchValue}\n            selectedFilterOption={this.state.selectedFilterOption}\n          />\n        </div>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React              from 'react';\nimport ReactDOM           from 'react-dom';\nimport App                from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}